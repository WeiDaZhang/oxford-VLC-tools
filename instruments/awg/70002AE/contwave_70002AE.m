function [awg] = contwave_70002AE(data_tx, amplitude, sampleRate)
%CONTWAVE_70002AE continuously outputs a waveform from the 30020AEAWG

linefeed = 10;

%% process the arbitary wave vector
outputVoltage = amplitude; %0.25 -> 0.5  Vpp
y = data_tx/max(data_tx); % normalised to 1, later has to be improved !


%% obtain AWG
[awg, buffer] = get_70002AE();


%% awg70k requires single precision vectors
waveform_data = single(y);
waveform_name = 'test';
waveform_samples = length(waveform_data);
waveform_bytes = waveform_samples * 4;


%% command formatting
delete_waveform = sprintf('wlist:waveform:delete "%s"', waveform_name);

header = sprintf('#%d%d',length(num2str(waveform_bytes)), waveform_bytes);

create_waveform = sprintf('wlist:waveform:new "%s", %d', waveform_name, ...
    length(waveform_data));

write_waveform_binblock = sprintf('wlist:waveform:data "%s", %s', ...
    waveform_name, header);

assign_waveform_ch1 = sprintf('source1:waveform "%s"', waveform_name);
%  assign_waveform_ch1 = sprintf('source2:waveform "%s"', waveform_name);


%% Set parameters and enable output
%     % Set output on channel 1
%     fwrite(myAWG, sprintf('SOURce1:WAVeform "MATLABSignal"\n'));
% Set the output parameters

fwrite(awg, sprintf('SOURce1:VOLTage:LEVel:IMMediate:AMPLitude %f\n', outputVoltage));
% fwrite(awg, sprintf('SOURce2:VOLTage:LEVel:IMMediate:AMPLitude %f\n',outputVoltage));

% Set the sample rate

fwrite(awg, sprintf('SOURce1:FREQ %d\n', sampleRate));
%     % Enable output on channel 1
%     fwrite(myAWG, sprintf('OUTPut1:STATe 1\n'));
% Set the run mode to continuous
fwrite(awg, sprintf('AWGC:RMOD CONT\n'));
%     % set the AWG operation state
%     fwrite(myAWG, sprintf('AWGC:RUN\n'));


%% send commands to instrument
% delete_waveform is only necessary if waveform exists
% the error generated by delete_waveform can be ignored
fwrite(awg, delete_waveform);
fwrite(awg, create_waveform);
awg.EOIMode = 'off';
fwrite(awg, write_waveform_binblock);
if buffer >= waveform_bytes
    fwrite(awg, waveform_data, 'single');
else
    sample_buffer = floor(buffer / 4);
    for a = 1:sample_buffer:waveform_samples-sample_buffer
        fwrite(awg, waveform_data(a:a+sample_buffer-1), 'single');
    end
    a = a + sample_buffer;
    fwrite(awg, waveform_data(a:end), 'single');
end


% MMEMORY:DATA:SIZE? "test"

awg.EOIMode = 'on';
fwrite(awg, linefeed);
fwrite(awg, assign_waveform_ch1);
fwrite(awg, sprintf('AWGC:RUN:IMMediate\n'));


%% status check after transfer
r = query(awg, '*esr?', '%s', '%d');
fprintf(1, 'event status register: %d\n', r);
% read all messages until No error
fprintf(1, 'messages:\n');
while 1
    r = query(awg, 'syst:err?');
    fprintf(1, '70002AE: %s', r);
    if strcmp(r, ['0,"No error"' linefeed])
        break
    end
end

% Enable the output of channe 1.
fwrite(awg, sprintf('OUTPut1:STATe 1\n'));
% fwrite(awg, sprintf('OUTPut2:STATe 1\n'));

% Set the run mode to continuous (equvilent to press the play button at the
% AWG
fwrite(awg, sprintf('AWGC:RMOD CONT\n'));
fwrite(awg, sprintf('AWGC:RUN\n'));

% gracefully disconnect

% fclose(awg);
% delete(awg);
% clear awg;

end

